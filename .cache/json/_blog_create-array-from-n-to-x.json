{"data":{"markdownRemark":{"html":"<p>If you have to create an array that starts at <strong>1</strong> and ends at <strong>1000</strong>, I'll bet $20 that you're not going to type in all the numbers manually.</p>\n<h2>But how would you create such an enormous array?</h2>\n<h3>Using the <code>For Loop</code></h3>\n<p>Let's begin with one of the most basic method of JavaScript. Almost everyone I know that knows JavaScript learned about the <code>for loop</code> at the very beginning of their JS learning path. So I'm assuming you're familiar with it all too well.</p>\n<p>Let's see this in action:</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> bigArray = [];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> i = </span><span class=\"mtk5\">0</span><span class=\"mtk1\">; i &lt; </span><span class=\"mtk5\">1000</span><span class=\"mtk1\">; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  bigArray[i] = i + </span><span class=\"mtk5\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(bigArray);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// An array starting at 1 that ends at 1000</span></span></span></code></pre>\n<ul>\n<li>Here <code>i</code> starts at <strong>0</strong> and ends at <strong>999</strong>, this gives the array a length of 1000.</li>\n<li>For each index of the array, we store <strong>that-index</strong> + <strong>1</strong> to it. Because the specification of this array tells us to return an array beginning at 1.</li>\n<li>If we had not added the 1 with every item of the array, we'd have end up with an array beginning at <strong>0</strong> and ending at <strong>999</strong>.</li>\n</ul>\n<h3>Using the <code>Array.from</code> Method</h3>\n<p>We can return the same array we created with <code>for loop</code> in a much easier way using the <code>Array.from</code> method.</p>\n<p>Let's see this in action:</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> numbers = Array.from(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  { length: </span><span class=\"mtk5\">1000</span><span class=\"mtk1\"> },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (item, index) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (item = index + </span><span class=\"mtk5\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(numbers);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we get the same result!</span></span></span></code></pre>\n<p>What did we do here?</p>\n<blockquote>\n<p>The Array.from() static method creates a new, shallow-copied Array instance from an array-like or iterable object.</p>\n</blockquote>\n<ul>\n<li>If we pass anything iterable to <code>Array.from</code> it'd return us an array.</li>\n<li>Remember that after everything array is an object in JavaScript and it have some built in property to it.</li>\n<li>So we destructured the length property out of a newly created array and set its value to 1000.</li>\n<li>The <code>Array.from</code> has a built in <code>map function</code> to it.</li>\n<li>We iterate over the array of 1000 items with the <code>map function</code> and pass in the <strong>current item</strong> and the <strong>current index</strong>.</li>\n<li>Finally we set the <strong>index + 1</strong> value to the current item.</li>\n</ul>\n<p>That's how we can easily get back an array beginning at a certain number and ending at another.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-light {\n    background-color: #FFFFFF;\n    color: #000000;\n  }\n  .visual-studio-light .mtk4 { color: #0000FF; }\n  .visual-studio-light .mtk1 { color: #000000; }\n  .visual-studio-light .mtk5 { color: #09885A; }\n  .visual-studio-light .mtk3 { color: #008000; }\n  .visual-studio-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","frontmatter":{"date":"December 24, 2020","slug":"/blog/create-array-from-n-to-x","title":"How to Create an Array Containing 1 to N in JavaScript","info":"How to create an array beginning at Number-X and that ends at Number-Y?"}}},"pageContext":{"slug":"/blog/create-array-from-n-to-x"}}
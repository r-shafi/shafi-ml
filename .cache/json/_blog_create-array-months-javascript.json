{"data":{"markdownRemark":{"html":"<p>Creating an array of months in JavaScript is a very cumbersome yet necessary task. We often have to create an array of months but have to type in the months manually or copy-paste it from the internet.</p>\n<p>But not anymore! Today I'll show you how you can create an array of months with just one line of code and will explain how this code works very thoroughly.</p>\n<h2>Lets Begin</h2>\n<blockquote>\n<p>The Array.from() static method creates a new, shallow-copied Array instance from an <strong>array-like</strong> or <strong>iterable object</strong>.</p>\n</blockquote>\n<p>In JavaScript, an <strong>iterable object</strong> is anything that we can loop over with <code>for of</code>.</p>\n<blockquote>\n<p>Of course, Arrays are iterable. But there are many other built-in objects, that are iterable as well. For instance, strings are also iterable.</p>\n</blockquote>\n<p>If we pass a string in the <code>Array.from</code> method, we'll see that it iterates over the string and returns an array with every letter of the string as an item in the array.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const arr = Array.from(&#39;shafi&#39;);\n\nconsole.log(arr);\n// [&quot;s&quot;, &quot;h&quot;, &quot;a&quot;, &quot;f&quot;, &quot;i&quot;]\nconsole.log(arr.length);\n// 5</code>\n        </deckgo-highlight-code>\n<p>We also know that every array has a property called <code>length</code> built into them.\nWe can <code>destructure</code> the length from within the <code>Array.from</code> method and return an array of <em>length number</em> of <code>undefined</code> items.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const arr = Array.from({ length: 5 });\n\nconsole.log(arr);\n// [undefined, undefined, undefined, undefined, undefined]</code>\n        </deckgo-highlight-code>\n<h3><code>Array.from</code> Map Function</h3>\n<p><code>Array.from</code> can take in multiple parameters. While the <strong>array-like</strong> or <strong>iterable object</strong> is necessary, we can also pass along an optional <code>map function</code>. The <code>map function</code> iterates over the newly created arrays items.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const arr = Array.from([10, 20, 30], (item) =&gt; item + 5);\n\nconsole.log(arr);\n// [15, 25, 35]</code>\n        </deckgo-highlight-code>\n<p>The <code>map function</code> can also take in multiple parameters. While you must have to pass in the <strong>current item</strong> of the array, it can also encompass the <code>index</code> and the array itself.</p>\n<p>Suppose we've to create an array of numbers beginning from 1 and ending at 5 (inclusive). We can easily create it using the <code>Array.from</code> and it's <code>map function</code>.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const arr = Array.from({ length: 5 }, (item, index) =&gt; index + 1);\n\nconsole.log(arr);\n// [1, 2, 3, 4, 5]</code>\n        </deckgo-highlight-code>\n<p>Here we had to define the <code>item</code> parameter even though we aren't going to use it, because the <code>index</code> would've remained inaccessible without defining the item.</p>\n<h3>Creating an Array of Months</h3>\n<p>Now that we understand how the <code>Array.from</code> method works, we can easily create an Array of Months.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const months = Array.from({ length: 12 }, (item, i) =&gt; {\n  return new Date(0, i).toLocaleString(&#39;en-US&#39;, { month: &#39;long&#39; });\n});\n\nconsole.log(months);\n// [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]</code>\n        </deckgo-highlight-code>\n<h2>OhMyGod! What did you do with the Date Object?</h2>\n<p>We can pass arguments in <code>Date</code> object in the following order:</p>\n<blockquote>\n<p>new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</p>\n</blockquote>\n<p>Here we only care about the month, but we can't pass in a <code>monthIndex</code> without passing the year. So we pass in the <strong>0</strong> as the argument for <code>year</code>.</p>\n<p>Next, we pass in the <code>index</code> of the <code>current item</code> of the array as the <code>month index</code>.\nThis works out perfectly as we have an array with 12 items beginning at index 0 and ending at index 11. And we know that in JavaScript months begin at index 0 and ends at index 11.\nSo we've nailed the order of the months.</p>\n<p>Now we use the <code>toLocaleString</code> method and tell it to modify the date in <code>en-US</code> and pass it an option to only return the month in full length.</p>\n<p>That's everything we did here to get back an array of months.</p>\n<h3>One more thing</h3>\n<p>We can return the month object in any language we want by changing the first parameter of the <code>toLocaleString</code> method.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"dracula\" >\n          <code slot=\"code\">const months = Array.from({ length: 12 }, (item, i) =&gt; {\n  return new Date(0, i).toLocaleString(&#39;bn-BD&#39;, { month: &#39;long&#39; });\n});\n\nconsole.log(months);\n// [&quot;জানুয়ারী&quot;, &quot;ফেব্রুয়ারী&quot;, &quot;মার্চ&quot;, &quot;এপ্রিল&quot;, &quot;মে&quot;, &quot;জুন&quot;, &quot;জুলাই&quot;, &quot;আগস্ট&quot;, &quot;সেপ্টেম্বর&quot;, &quot;অক্টোবর&quot;, &quot;নভেম্বর&quot;, &quot;ডিসেম্বর&quot;]</code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 19, 2020","slug":"/blog/create-array-months-javascript","title":"Create an Array of Months with JavaScript","info":"How to create an Array of Months with JavaScript"}}},"pageContext":{"slug":"/blog/create-array-months-javascript"}}
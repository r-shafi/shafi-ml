{"data":{"markdownRemark":{"html":"<p>Creating an array of months in JavaScript is a very cumbersome yet necessary task. We often have to create an array of months but have to type in the months manually or copy-paste it from the internet.</p>\n<p>But not anymore! Today I'll show you how you can create an array of months with just one line of code and will explain how this code works very thoroughly.</p>\n<h2>Lets Begin</h2>\n<blockquote>\n<p>The Array.from() static method creates a new, shallow-copied Array instance from an <strong>array-like</strong> or <strong>iterable object</strong>.</p>\n</blockquote>\n<p>In JavaScript, an <strong>iterable object</strong> is anything that we can loop over with <code>for of</code>.</p>\n<blockquote>\n<p>Of course, Arrays are iterable. But there are many other built-in objects, that are iterable as well. For instance, strings are also iterable.</p>\n</blockquote>\n<p>If we pass a string in the <code>Array.from</code> method, we'll see that it iterates over the string and returns an array with every letter of the string as an item in the array.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> arr = Array.from(</span><span class=\"mtk12\">&#39;shafi&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(arr);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [&quot;s&quot;, &quot;h&quot;, &quot;a&quot;, &quot;f&quot;, &quot;i&quot;]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(arr.length);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 5</span></span></span></code></pre>\n<p>We also know that every array has a property called <code>length</code> built into them.\nWe can <code>destructure</code> the length from within the <code>Array.from</code> method and return an array of <em>length number</em> of <code>undefined</code> items.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> arr = Array.from({ length: </span><span class=\"mtk5\">5</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(arr);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [undefined, undefined, undefined, undefined, undefined]</span></span></span></code></pre>\n<h3><code>Array.from</code> Map Function</h3>\n<p><code>Array.from</code> can take in multiple parameters. While the <strong>array-like</strong> or <strong>iterable object</strong> is necessary, we can also pass along an optional <code>map function</code>. The <code>map function</code> iterates over the newly created arrays items.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> arr = Array.from([</span><span class=\"mtk5\">10</span><span class=\"mtk1\">, </span><span class=\"mtk5\">20</span><span class=\"mtk1\">, </span><span class=\"mtk5\">30</span><span class=\"mtk1\">], (item) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> item + </span><span class=\"mtk5\">5</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(arr);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [15, 25, 35]</span></span></span></code></pre>\n<p>The <code>map function</code> can also take in multiple parameters. While you must have to pass in the <strong>current item</strong> of the array, it can also encompass the <code>index</code> and the array itself.</p>\n<p>Suppose we've to create an array of numbers beginning from 1 and ending at 5 (inclusive). We can easily create it using the <code>Array.from</code> and it's <code>map function</code>.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> arr = Array.from({ length: </span><span class=\"mtk5\">5</span><span class=\"mtk1\"> }, (item, index) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> index + </span><span class=\"mtk5\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(arr);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [1, 2, 3, 4, 5]</span></span></span></code></pre>\n<p>Here we had to define the <code>item</code> parameter even though we aren't going to use it, because the <code>index</code> would've remained inaccessible without defining the item.</p>\n<h3>Creating an Array of Months</h3>\n<p>Now that we understand how the <code>Array.from</code> method works, we can easily create an Array of Months.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> months = Array.from({ length: </span><span class=\"mtk5\">12</span><span class=\"mtk1\"> }, (item, i) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> Date(</span><span class=\"mtk5\">0</span><span class=\"mtk1\">, i).toLocaleString(</span><span class=\"mtk12\">&#39;en-US&#39;</span><span class=\"mtk1\">, { month: </span><span class=\"mtk12\">&#39;long&#39;</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(months);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]</span></span></span></code></pre>\n<h2>OhMyGod! What did you do with the Date Object?</h2>\n<p>We can pass arguments in <code>Date</code> object in the following order:</p>\n<blockquote>\n<p>new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</p>\n</blockquote>\n<p>Here we only care about the month, but we can't pass in a <code>monthIndex</code> without passing the year. So we pass in the <strong>0</strong> as the argument for <code>year</code>.</p>\n<p>Next, we pass in the <code>index</code> of the <code>current item</code> of the array as the <code>month index</code>.\nThis works out perfectly as we have an array with 12 items beginning at index 0 and ending at index 11. And we know that in JavaScript months begin at index 0 and ends at index 11.\nSo we've nailed the order of the months.</p>\n<p>Now we use the <code>toLocaleString</code> method and tell it to modify the date in <code>en-US</code> and pass it an option to only return the month in full length.</p>\n<p>That's everything we did here to get back an array of months.</p>\n<h3>One more thing</h3>\n<p>We can return the month object in any language we want by changing the first parameter of the <code>toLocaleString</code> method.</p>\n<pre class=\"grvsc-container visual-studio-light\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> months = Array.from({ length: </span><span class=\"mtk5\">12</span><span class=\"mtk1\"> }, (item, i) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> Date(</span><span class=\"mtk5\">0</span><span class=\"mtk1\">, i).toLocaleString(</span><span class=\"mtk12\">&#39;bn-BD&#39;</span><span class=\"mtk1\">, { month: </span><span class=\"mtk12\">&#39;long&#39;</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">console.log(months);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// [&quot;জানুয়ারী&quot;, &quot;ফেব্রুয়ারী&quot;, &quot;মার্চ&quot;, &quot;এপ্রিল&quot;, &quot;মে&quot;, &quot;জুন&quot;, &quot;জুলাই&quot;, &quot;আগস্ট&quot;, &quot;সেপ্টেম্বর&quot;, &quot;অক্টোবর&quot;, &quot;নভেম্বর&quot;, &quot;ডিসেম্বর&quot;]</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .visual-studio-light {\n    background-color: #FFFFFF;\n    color: #000000;\n  }\n  .visual-studio-light .mtk4 { color: #0000FF; }\n  .visual-studio-light .mtk1 { color: #000000; }\n  .visual-studio-light .mtk12 { color: #A31515; }\n  .visual-studio-light .mtk3 { color: #008000; }\n  .visual-studio-light .mtk5 { color: #09885A; }\n  .visual-studio-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","frontmatter":{"date":"December 19, 2020","slug":"/blog/create-array-months-javascript","title":"Create an Array of Months with JavaScript","info":"How to create an Array of Months with JavaScript"}}},"pageContext":{"slug":"/blog/create-array-months-javascript"}}
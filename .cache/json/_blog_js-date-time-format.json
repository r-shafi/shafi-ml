{"data":{"markdownRemark":{"html":"<blockquote>\n<p>The <strong>Intl</strong> object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting.</p>\n</blockquote>\n<h2>How Can I Format Date and Time in JavaScript?</h2>\n<p>Suppose we have a <code>Date</code> object in a variable called <code>now</code></p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const now = new Date();</code>\n        </deckgo-highlight-code>\n<p>If we log this <code>now</code> variable in the console, we'll see an unformatted string of our location specific current date and time with many unnecessary information being printed out.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">console.log(now);\n// Sun Dec 13 2020 10:38:06 GMT+0600 (Bangladesh Standard Time)</code>\n        </deckgo-highlight-code>\n<p>We can use the <code>DateTimeFormat</code> constructor of <code>Intl</code> object to quickly format the <code>now</code> Date object for us and return a formatted date string</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const formatDateInBangla = new Intl.DateTimeFormat(&#39;bn-BD&#39;).format(now);\n\nconsole.log(formatDateInBangla);\n// ১৩/১২/২০২০</code>\n        </deckgo-highlight-code>\n<p>The <code>DateTimeFormat</code> constructor can take two <code>parameters</code>; <code>locale</code> or default date formatting for language and an <code>options object</code>. We'll talk about the <code>options object</code> soon.</p>\n<p>We're going to write the same code snippet as last time with a slight change, we're going to set the <code>locale</code> to <code>en-GB</code> or British English instead of <code>bn-BD</code> or Bangla (Bangladesh).</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const formatDateInEnglish = new Intl.DateTimeFormat(&#39;en-GB&#39;).format(now);\n\nconsole.log(formatDateInEnglish);\n// 13/12/2020</code>\n        </deckgo-highlight-code>\n<h3>Using the Options Object</h3>\n<p>The <code>options object</code> can take some or all of the following properties <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\">described here.</a></p>\n<p>To keep this tutorial short, we're only going to use <code>dateStyle</code>\nand <code>timeStyle</code> options.</p>\n<h4>Using <code>dateStyle</code></h4>\n<p>The date formatting style has four possible values:</p>\n<ul>\n<li>'full'</li>\n<li>'long'</li>\n<li>'medium'</li>\n<li>'short'</li>\n</ul>\n<p>This time we're going to pass an <code>option object</code> with <code>dateStyle</code> as a key and <code>'full'</code> as its value.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const option = {\n  dateStyle: &#39;full&#39;,\n};\n\nconst formatDate = new Intl.DateTimeFormat(&#39;en-GB&#39;, option).format(now);\n\nconsole.log(formatDate);\n// Sunday, 13 December 2020</code>\n        </deckgo-highlight-code>\n<p>Remember when we talked about the <code>DateTimeFormat</code> constructors ability to take in two arguments? Well, look closely, we've passed in the <code>option object</code> we created.\nThat <code>option object</code> is telling the constructor to format the <code>now</code> date object in full form in British standard (passed in as locale).</p>\n<p>Cool! Now it's time for you to test out the other three values of the <code>dateStyle</code> and see what they returns!</p>\n<h4>Using <code>timeStyle</code></h4>\n<p>The time formatting style have the same four possible values as the <code>dateStyle</code> property.</p>\n<p>Our <code>now</code> variable, which is a date object, contains information about the <em>time</em> it was created at.\nThis time we're going to format the <code>now</code> variable using the <code>timeStyle</code> property as the <strong>only</strong> option and see what it returns to us.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const formatTime = new Intl.DateTimeFormat(&#39;en-GB&#39;, {\n  timeStyle: &#39;short&#39;,\n}).format(now);\n// You can pass in the option object inline!\n\nconsole.log(formatTime);\n// 11:38</code>\n        </deckgo-highlight-code>\n<p>Well, that's not so pretty, is it? Is it day or night?</p>\n<p>Let's try something else.</p>\n<deckgo-highlight-code language=\"javascript\"  theme=\"seti\" >\n          <code slot=\"code\">const options = {\n  timeStyle: &#39;short&#39;,\n  hour12: true,\n};\n// Obviously you can pass multiple options\n\nconst formatTimeNotUgly = new Intl.DateTimeFormat(&#39;en-GB&#39;, options).format(now);\n\nconsole.log(formatTimeNotUgly);\n// 11:43 am</code>\n        </deckgo-highlight-code>\n<p>I hope you now understand how the <code>Intl.DateTimeFormat</code> constructor works. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\">Please read this MDN Documentation for an in depth understanding of Intl.DateTimeFormat.</a></p>","frontmatter":{"date":"December 13, 2020","slug":"/blog/js-date-time-format","title":"Format Date and Time with JavaScript","info":"How can I format date and time in JavaScript? JS Intl.DateTimeFormat"}}},"pageContext":{"slug":"/blog/js-date-time-format"}}